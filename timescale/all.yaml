# nginx
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timescale-bridge
  namespace: timescale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: timescale-bridge
  template:
    metadata:
      labels:
        app: timescale-bridge
    spec:
      containers:
      - name: nginx
        image: node
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Starting the application..."
            npm install -g express
            cd `npm root -g`
            pwd
            node <<EOF
              const express = require('express');
              const app = express();
              app.use(express.json());
              app.use(express.urlencoded({ extended: true }));

              // Define a route for the root URL
              app.get('/', (req, res) => {
                  res.send('Hello, World!');
              });

              app.post('/rriv-web-hook', (req, res) => {
                console.log('body', req.body);
                res.send('ok');
              });

              // Start the server
              app.listen(80, () => {
                  console.log('running...');
              });
            EOF
        ports:
        - containerPort: 80  # NGINX listens on port 80

---
# nodeport service
apiVersion: v1
kind: Service
metadata:
  name: timescale-bridge-service
  namespace: timescale
spec:
  selector:
    app: timescale-bridge
  ports:
    - port: 30001          # The port that the service will expose
      targetPort: 80    # The port on the container
      nodePort: 30001    # Optional: specify a NodePort (between 30000-32767)
  type: NodePort
      #  ports:
      #    - protocol: TCP
      #      port: 30001           # The port on which the service will be exposed
      #      targetPort: 80      
      #  type: ClusterIP           # Exposes the service only within the cluster (default behavior)

